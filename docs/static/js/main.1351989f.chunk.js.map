{"version":3,"sources":["reportWebVitals.js","componenets/AddCategory.js","componenets/GifGridItem.js","helpers/Gifts.js","componenets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","newCategory","setNewCategory","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","isLoading","state","setstate","useEffect","useFetchGifs","GifExpertApp","props","cat","ReactDOM","render","document","getElementById"],"mappings":"oLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,qBC8BCQ,EAlCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAEpB,EAAoCC,mBAAS,IAA7C,mBAAKC,EAAL,KAAkBC,EAAlB,KAeA,OACI,uBAAMC,SAVO,SAACC,GACdA,EAAEC,iBACCJ,EAAYK,OAAS,IACpBP,GAAc,SAAAQ,GAAU,OAAKN,GAAL,mBAAqBM,OAC7CL,EAAe,MAMnB,UACI,8CACA,uBACIM,KAAK,OACLC,MAAOR,EACPS,SAnBS,SAACN,GAClBF,EAAeE,EAAEO,OAAOF,c,QCQjBG,EAdK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAE7B,OACI,sBAAKC,UAAU,iBAAf,UACI,kCAAMF,EAAN,OACA,qBAAKG,IAAKF,EAAKG,IAAMJ,Q,uBCQlBK,EAdF,uCAAI,WAAOC,GAAP,uBAAAC,EAAA,6DACPN,EADO,0FACkFO,UAAUF,GAD5F,sBAEMG,MAAMR,GAFZ,cAEPS,EAFO,gBAGQA,EAAKC,OAHb,uBAGNC,EAHM,EAGNA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAGgB,EAAIhB,GACPC,MAAOe,EAAIf,MACXC,IAAG,UAACc,EAAIC,cAAL,aAAC,EAAYC,iBAAiBhB,QAR5B,kBAWNY,GAXM,4CAAJ,sDCyBEK,EAtBC,SAAC,GAAoB,IAAjBZ,EAAgB,EAAhBA,SAEhB,ECFwB,SAACA,GAEzB,MAA0BpB,mBAAS,CAAC0B,KAAK,GAAIO,WAAW,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KASA,OAPAC,qBAAU,WACNjB,EAAQC,GAAU5B,MAAK,SAAAsC,GACnBK,EAAS,CAACT,KAAKI,EAAQG,WAAU,SAEtC,CAACb,IAGGc,EDT2BG,CAAajB,GAAnCU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,UAEpB,OACI,qCACI,mCAAMb,EAAN,OACCa,GAAa,wCACd,qBAAKjB,UAAU,OAAf,SAEQc,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEgBtByB,EA5BM,SAAAC,GAEjB,MAAkCvC,mBAAS,CAAC,cAA5C,mBAAKO,EAAL,KAAiBR,EAAjB,KAMA,OACI,gCACI,gDAEA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAEA,6BACMQ,EAAWqB,KAAK,SAAAY,GAAG,OACjB,cAAC,EAAD,CAEIpB,SAAUoB,GADLA,YCjB7BC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BvD,M","file":"static/js/main.1351989f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React , {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ( { setCategories } ) => {\r\n\r\n    let [newCategory, setNewCategory] = useState('') ;\r\n\r\n    const handleChange = (e) => {\r\n        setNewCategory(e.target.value);\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(newCategory.length > 2){\r\n            setCategories(categories => [newCategory, ...categories]);\r\n            setNewCategory('')\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { onSubmit } >\r\n            <h2>Add category</h2>\r\n            <input \r\n                type='text' \r\n                value={newCategory}\r\n                onChange = { handleChange }\r\n            >\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className='grid-item-item'>\r\n            <p> { title } </p>\r\n            <img src={url} alt= {title}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGridItem\r\n","\r\nconst getGifs =  async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=1W3VY7VBXaIQ84RRdKuO9c2cGjPw5Msa&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id:img.id,\r\n            title: img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","import React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ( { category } ) => {\r\n\r\n    const {data:images, isLoading} =  useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n            {isLoading && <p>Loading</p> }\r\n            <div className='grid'>\r\n                {   \r\n                    images.map( img => (\r\n                        <GifGridItem  \r\n                            key={img.id}\r\n                            {...img}/>\r\n                        \r\n                    ))   \r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport getGifs from \"../helpers/Gifts\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({data:[], isLoading: true});\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(images => {\r\n            setstate({data:images, isLoading:false});\r\n        });\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n    \r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './componenets/AddCategory';\r\nimport GifGrid from './componenets/GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n\r\n    let [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /*const hadleAdd = () => {\r\n        setCategories([...categories,'Nueva categoria']);\r\n    };*/\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif expert App</h2>\r\n\r\n            <AddCategory setCategories = { setCategories }></AddCategory>\r\n\r\n            <hr/>\r\n\r\n            <ol>\r\n                { categories.map( cat => (\r\n                    <GifGrid\r\n                        key={cat}\r\n                        category={cat}\r\n                    />\r\n                ))}\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n        ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}